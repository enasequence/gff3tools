plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id "org.hidetake.ssh" version "2.12.0"
    id "com.diffplug.spotless" version "7.2.1"
    id "com.gradleup.shadow" version "8.3.0"
}

base {
    archivesName = 'gff3tools'
    group = 'uk.ac.ebi.ena'
    version = '1.1.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

ext.codonDeployBaseDir = "/hps/software/users/tburdett/ena/jar/gff3tools/";


spotless {
    encoding 'UTF-8'
    lineEndings 'UNIX'
    java {
        licenseHeader '''/*
 * Copyright 2025 EMBL - European Bioinformatics Institute
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
'''
        importOrder 'java', 'javax', 'org', 'com', '', 'uk'
        removeUnusedImports()
        palantirJavaFormat()
    }
}

application {
    mainClass.set("uk.ac.ebi.embl.gff3tools.cli.Main")
}

jar {
    archiveClassifier.set('')
}

shadowJar {
    archiveClassifier.set('all')
    dependsOn(distTar, distZip)
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://gitlab.ebi.ac.uk/api/v4/groups/enasequence/-/packages/maven"
    }
}

dependencies {
    implementation("org.projectlombok:lombok:1.18.30")
    annotationProcessor("org.projectlombok:lombok:1.18.30")
    implementation( 'uk.ac.ebi.ena.sequence:sequencetools:2.+' )
    implementation "io.vavr:vavr:0.10.5"
    implementation "org.jgrapht:jgrapht-core:1.5.2"
    implementation("info.picocli:picocli:4.7.6")
    implementation 'ch.qos.logback:logback-classic:1.3.14'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'net.sourceforge.owlapi:owlapi-apibinding:5.1.20'
    implementation 'net.sourceforge.owlapi:owlapi-distribution:5.1.20'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
}

remotes {
    codon {
        host = 'codon-ena-slurm.ebi.ac.uk'
        user = 'esa'
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        knownHosts = allowAnyHosts
    }
}

test {
    useJUnitPlatform()
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "https://gitlab.ebi.ac.uk/api/v4/projects/5502/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = gitlab_private_token
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}


task deploy() {
    dependsOn shadowJar

    doLast {
        deployToRemote(remotes.codon, codonDeployBaseDir)
    }
}

def deployToRemote(remote, deployBaseDir) {
    def assemble = tasks.named("shadowJar").get()

    uploadAssembleAndCreateSymlink(assemble, deployBaseDir,remote)

    displaySymlink(getSymlinkFullName(deployBaseDir , assemble ), remote)
}

def uploadAssembleAndCreateSymlink(assemble, deployBaseDir, remote) {

    def symlinkFullName = getSymlinkFullName(deployBaseDir , assemble)
    def symlinkTarget = getSymlinkTarget(deployBaseDir,  assemble)


    printSeparationLine()
    println("\tsymlinkDir:'$deployBaseDir'\tuploadAssembleDir:'$deployBaseDir'")
    println("\tsymlinkName:'$symlinkFullName'\tsymlinkTargetName:'$symlinkTarget'")

    uploadAssemble(assemble , deployBaseDir , remote)
    createSymlink(symlinkFullName , symlinkTarget , remote)
    printSeparationLine()
}

def displaySymlink(symlink , remote){
    ssh.run {
        session(remote) {
            def result = execute "ls -l $symlink", ignoreError: true
            println "Current symlink: $result"
        }
    }
}

def uploadAssemble(assemble , deployBaseDir , remote){
    def jarFile = assemble.archiveFile.get().asFile
    ssh.run {
        session(remote) {
            println "\tUpload: "+jarFile.absolutePath + " to "+deployBaseDir
            put from: jarFile.absolutePath, into: deployBaseDir
        }
    }
}

def createSymlink(symlink , symlinkTarget , remote){
    ssh.run {
        session(remote) {
            println ("\tCreating symbolic link:'$symlink', target:'$symlinkTarget', remote:'$remote.host'")
            execute "ln -s -f $symlinkTarget $symlink"
        }
    }
}

static String getAssembleBaseName(assemble){
    return assemble.archiveFileName.get();
}

static String getSymlinkFullName(deployBaseDir, assemble){
    return "$deployBaseDir" + assemble.archiveBaseName.get() + "." + assemble.archiveExtension.get()
}

static String getSymlinkTarget(deployBaseDir, assemble){
    return "$deployBaseDir" + getAssembleBaseName(assemble)
}

def printSeparationLine(){
    println("*" * 100)
}
